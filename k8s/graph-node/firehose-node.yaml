---
apiVersion: v1
kind: Service
metadata:
  name: persistencecore-firehose-node
  labels:
    app.kubernetes.io/name: persistencecore-firehose-node
spec:
  clusterIP: None
  ports:
    - name: p2p
      port: 26656
      protocol: TCP
      targetPort: 26656
    - name: rpc
      port: 26657
      protocol: TCP
      targetPort: 26657
    - name: http
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: firehose
      port: 9030
      protocol: TCP
      targetPort: 9030
  selector:
    app.kubernetes.io/name: persistencecore-firehose-node
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: persistencecore-firehose-node
spec:
  serviceName: persistencecore-firehose-node
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: persistencecore
      app.kubernetes.io/name: persistencecore-firehose-node
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
        genesis_node_data_resolution_method: DYNAMIC
        genesis_host: persistencecore-genesis.dev-core.svc.cluster.local
        genesis_exposer_port: '8081'
        genesis_json_fetch_url: ''
        genesis_port_p2p: '26656'
      labels:
        app.kubernetes.io/instance: persistencecore
        app.kubernetes.io/type: persistencecore-firehose-node
        app.kubernetes.io/name: persistencecore-firehose-node
        app.kubernetes.io/version: '0.1'
    spec:
      initContainers:
        - name: wait-for-genesis
          image: betterpersist/persistencecore:v5.0.1-fh
          imagePullPolicy: Always
          env:
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_node_data_resolution_method']
            - name: GENESIS_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_host']
            - name: GENESIS_PORT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_exposer_port']
          command:
            - bash
            - "-c"
            - |
              # Do the following if the resolution method is dynamic else skip (we assume that in static configuration peer node is already up)
              if [ "$GENESIS_NODE_DATA_RESOLUTION_METHOD" = "DYNAMIC" ]; then
                while [ $(curl -sw '%{http_code}' http://$GENESIS_HOST:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                  echo "Genesis validator does not seem to be ready. Waiting for it to start..."
                  sleep 10;
                done
              fi
              echo "Ready to start"
              exit 0
        - name: init-firehose-node
          image: betterpersist/persistencecore:v5.0.1-fh
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
            - name: GENESIS_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_host']
            # We support 2 types of resolution methods: (dynamic, static), if the resolution method is dynamic then we fetch the node id
            # on the fly from the exposer app exposed service on the specified port, otherwise it is required that the node id is 
            # specified exactly as an environment variable
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_node_data_resolution_method']
            - name: GENESIS_EXPOSER_PORT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_exposer_port']
            # This URL is used to fetch the genesis json if the NODE_DATA_RESOLUTION_METHOD is static
            - name: GENESIS_JSON_FETCH_URL
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_json_fetch_url']
            - name: GENESIS_PORT_P2P
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_port_p2p']
          command:
            - bash
            - "-c"
            - |
              NODE_INDEX=${HOSTNAME##*-}
              echo "firehose-node Index: $NODE_INDEX"

              rm -rf $HOME_DIR/*

              NODE_NAME=$(jq -r ".firehose_nodes[$NODE_INDEX].name" /configs-graph/firehose-node.json)
              echo "firehose-node Index: $NODE_INDEX, Key name: $NODE_NAME"

              echo "Printing genesis file before init"
              ls -lrht $HOME_DIR/config

              jq -r ".firehose_nodes[$NODE_INDEX].mnemonic" /configs-graph/firehose-node.json | persistenceCore init $NODE_NAME --chain-id $CHAIN_ID --home $HOME_DIR --recover
              jq -r ".firehose_nodes[$NODE_INDEX].mnemonic" /configs-graph/firehose-node.json | persistenceCore keys add $NODE_NAME --recover --keyring-backend="test" --home $HOME_DIR

              # if we have GENESIS_NODE_DATA_RESOLUTION_METHOD is dynamic fetch the genesis from the GENESIS_EXPOSED_PORT on the GENESIS_HOST 
              # else fetch it directly from GENESIS_JSON_FETCH_URL
              if [ "$GENESIS_NODE_DATA_RESOLUTION_METHOD" = "DYNAMIC" ]; then
                  echo "Config: DYNAMIC. Fetching genesis file from $GENESIS_HOST:$GENESIS_PORT"
                  GENESIS_NODE_ID=$(curl -s http://$GENESIS_HOST:$GENESIS_PORT/node_id)
                  curl http://$GENESIS_HOST:$GENESIS_PORT/genesis -o $HOME_DIR/config/genesis.json
              else
                  echo "Config: STATIC. Fetching genesis file from $GENESIS_JSON_FETCH_URL"
                  curl $GENESIS_JSON_FETCH_URL -o $HOME_DIR/config/genesis.json
                  GENESIS_NODE_ID=$(persistenceCore status --node tcp://$GENESIS_HOST:26657 2>&1 > /dev/null | jq -r '.NodeInfo.id')
              fi

              echo "Genesis file that we got....."
              cat $HOME_DIR/config/genesis.json

              GENESIS_NODE_P2P=$GENESIS_NODE_ID@$GENESIS_HOST:$GENESIS_PORT_P2P
              echo "Node P2P: $GENESIS_NODE_P2P \n\n"

              echo '\n random-empty-string \n'

              # sed -i "s/persistent_peers = \"\"/persistent_peers = \"$GENESIS_NODE_P2P\"/g" $HOME_DIR/config/config.toml
              sed -i 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $HOME_DIR/config/config.toml
              sed -i 's/timeout_commit = "5s"/timeout_commit = "1s"/g' $HOME_DIR/config/config.toml
              sed -i 's/timeout_propose = "3s"/timeout_propose = "1s"/g' $HOME_DIR/config/config.toml
              sed -i 's/index_all_keys = false/index_all_keys = true/g' $HOME_DIR/config/config.toml

              # SNAP_RPC="https://rpc.testnet.persistence.one:443"

              # LATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height); \
              # BLOCK_HEIGHT=$((LATEST_HEIGHT - 20000)); \
              # TRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)

              # sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\1true| ; \
              # s|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\1\"$SNAP_RPC,$SNAP_RPC\"| ; \
              # s|^(trust_height[[:space:]]+=[[:space:]]+).*$|\1$BLOCK_HEIGHT| ; \
              # s|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\1\"$TRUST_HASH\"|" $HOME_DIR/config/config.toml

              sed -i 's/seeds = \"\"/seeds = \"aeb1a074c6cbb00e32f9380cbf11c960e9b165ea@13.125.252.209:26656,b4237f8a7ca357d380ad119b76cbceec7e7e8a75@seed.testnet.persistence.one:26656\"/g' $HOME_DIR/config/config.toml

              echo "Printing the whole config.toml file"

              cat << END >> $HOME_DIR/config/config.toml
              #######################################################
              ###       Extractor Configuration Options     ###
              #######################################################
              [extractor]
              enabled = true
              output_file = "stdout"
              END

              cat $HOME_DIR/config/config.toml
          resources:
            limits:
              cpu: "0.2"
              memory: "200M"
            requests:
              cpu: "0.1"
              memory: "200M"
          volumeMounts:
            - mountPath: /persistencecore
              name: persistencecore
            - mountPath: /configs-graph
              name: addresses-graph
      containers:
        - name: firehose-node
          image: betterpersist/persistencecore:v5.0.1-fh-fix
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
          command:
            - bash
            - "-c"
            - |
              echo "Installing firecosmos"
              wget https://github.com/figment-networks/firehose-cosmos/releases/download/v0.6.0/firecosmos_linux_amd64 -O firecosmos
              chmod +x firecosmos
              mv firecosmos /usr/local/bin

              echo "starting firehose with persistence core"
              sleep infinity
              # firecosmos start --config /configs-graph/firehose.yml --data-dir /fh-data
          resources:
            limits:
              cpu: "1"
              memory: "2G"
            requests:
              cpu: "1"
              memory: "2G"
          volumeMounts:
            - mountPath: /persistencecore
              name: persistencecore
            - mountPath: /configs-graph
              name: addresses-graph
            - mountPath: /fh-data
              name: firehose-pv-storage
      volumes:
        - name: persistencecore
          emptyDir: { }
        - name: firehose-pv-storage
          persistentVolumeClaim:
            claimName: firehose-pv-claim
        - name: addresses-graph
          configMap:
            name: test-addresses-persistencecore-graph
---
