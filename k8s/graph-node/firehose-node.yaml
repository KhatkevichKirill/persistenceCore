---
apiVersion: v1
kind: Service
metadata:
  name: persistencecore-firehose-node
  labels:
    app.kubernetes.io/name: persistencecore-firehose-node
spec:
  clusterIP: None
  ports:
    - name: p2p
      port: 26656
      protocol: TCP
      targetPort: 26656
    - name: rpc
      port: 26657
      protocol: TCP
      targetPort: 26657
    - name: http
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: firehose
      port: 9030
      protocol: TCP
      targetPort: 9030
  selector:
    app.kubernetes.io/name: persistencecore-firehose-node
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: persistencecore-firehose-node
spec:
  serviceName: persistencecore-firehose-node
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: persistencecore
      app.kubernetes.io/name: persistencecore-firehose-node
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
        genesis_node_data_resolution_method: DYNAMIC
        genesis_host: persistencecore-genesis.dev-core.svc.cluster.local
        genesis_exposer_port: '8081'
        genesis_json_fetch_url: ''
        genesis_port_p2p: '26656'
        state_restore_snapshot_url: ''
      labels:
        app.kubernetes.io/instance: persistencecore
        app.kubernetes.io/type: persistencecore-firehose-node
        app.kubernetes.io/name: persistencecore-firehose-node
        app.kubernetes.io/version: '0.1'
    spec:
      initContainers:
        - name: wait-for-genesis
          image: betterpersist/persistencecore:v5.0.1-fh-fix
          imagePullPolicy: Always
          env:
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_node_data_resolution_method']
            - name: GENESIS_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_host']
            - name: GENESIS_PORT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_exposer_port']
          command:
            - bash
            - "-c"
            - |
              # Do the following if the resolution method is dynamic else skip (we assume that in static configuration peer node is already up)
              if [ "$GENESIS_NODE_DATA_RESOLUTION_METHOD" = "DYNAMIC" ]; then
                while [ $(curl -sw '%{http_code}' http://$GENESIS_HOST:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                  echo "Genesis validator does not seem to be ready. Waiting for it to start..."
                  sleep 10;
                done
              fi
              echo "Ready to start"
              exit 0
        - name: init-firehose-node
          image: betterpersist/persistencecore:v5.0.1-fh-fix
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
            - name: GENESIS_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_host']
            # We support 2 types of resolution methods: (dynamic, static), if the resolution method is dynamic then we fetch the node id
            # on the fly from the exposer app exposed service on the specified port, otherwise it is required that the node id is 
            # specified exactly as an environment variable
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_node_data_resolution_method']
            - name: GENESIS_EXPOSER_PORT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_exposer_port']
            # This URL is used to fetch the genesis json if the NODE_DATA_RESOLUTION_METHOD is static
            - name: GENESIS_JSON_FETCH_URL
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_json_fetch_url']
            - name: GENESIS_PORT_P2P
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['genesis_port_p2p']
            - name: STATE_RESTORE_SNAPSHOT_URL
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['state_restore_snapshot_url']
          command:
            - bash
            - "-c"
            - |
              ls -lah /
              ls -lah /scripts/
              bash /scripts/init-firehose-node.sh
          resources:
            limits:
              cpu: "1"
              memory: "1G"
            requests:
              cpu: "1"
              memory: "1G"
          volumeMounts:
            - mountPath: /persistencecore
              name: node-pv-storage
            - mountPath: /config-graph
              name: config-graph
            - mountPath: /scripts
              name: scripts
      containers:
        - name: firehose-node
          image: betterpersist/persistencecore:v5.0.1-fh-fix
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
          command:
            - bash
            - "-c"
            - |
              echo "Installing firecosmos"
              wget https://github.com/figment-networks/firehose-cosmos/releases/download/v0.6.0/firecosmos_linux_amd64 -O firecosmos
              chmod +x firecosmos
              mv firecosmos /usr/local/bin

              echo "starting firehose with persistence core"
              sleep infinity
              # firecosmos start --config $HOME_DIR/config/firehose.yml --data-dir /fh-data
          resources:
            limits:
              cpu: "2"
              memory: "4G"
            requests:
              cpu: "1"
              memory: "3G"
          volumeMounts:
            - mountPath: /persistencecore
              name: node-pv-storage
            - mountPath: /config-graph
              name: config-graph
            - mountPath: /fh-data
              name: firehose-pv-storage
      volumes:
        - name: firehose-pv-storage
          persistentVolumeClaim:
            claimName: firehose-pv-claim
        - name: config-graph
          configMap:
            name: config-graph
        - name: scripts
          configMap:
            name: scripts
  volumeClaimTemplates:
  - metadata:
      name: node-pv-storage
    spec:
      storageClassName: do-block-storage
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 30Gi
